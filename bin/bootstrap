#!/usr/bin/env bash
BASEDIR=`dirname $0`/..
. "${BASEDIR}/lib/env.sh"
. "${BASEDIR}/lib/generate_passphrase.sh"
. "${BASEDIR}/lib/terraform.sh"
set -e

concourse_github_client="$(security find-generic-password -a "Concourse Client" -s github.com -w)"
concourse_github_secret="$(security find-generic-password -a "Concourse Secret" -s github.com -w)"

prepare () {
  git clone https://github.com/concourse/concourse-bosh-deployment.git ${work_dir}/concourse
  git clone https://github.com/pivotal-cf/credhub-release.git ${work_dir}/credhub
}

environment () {
  source_json="$(outputs pave)"

  export BBL_IAAS=${iaas}
  export BBL_VSPHERE_VCENTER_USER="$(echo "$source_json" | jq -r .bbl_user.value )"
  export BBL_VSPHERE_VCENTER_PASSWORD="$(echo "$source_json" | jq -r .bbl_password.value )"
  export BBL_VSPHERE_VCENTER_IP="$(echo "$source_json" | jq -r .vcenter_fqdn.value )"
  export BBL_VSPHERE_VCENTER_DC="$(echo "$source_json" | jq -r .bbl_datacenter.value )"
  export BBL_VSPHERE_VCENTER_CLUSTER="$(echo "$source_json" | jq -r .bbl_cluster.value )"
  export BBL_VSPHERE_VCENTER_RP="$(echo "$source_json" | jq -r .bbl_resource_pool.value )"
  export BBL_VSPHERE_NETWORK="$(echo "$source_json" | jq -r .bootstrap_network.value )"
  export BBL_VSPHERE_VCENTER_DS="$(echo "$source_json" | jq -r .bbl_datastore.value )"
  export BBL_VSPHERE_SUBNET="$(echo "$source_json" | jq -r .bootstrap_cidr.value )"
  export BBL_VSPHERE_VCENTER_DISKS
  export BBL_VSPHERE_VCENTER_TEMPLATES
  export BBL_VSPHERE_VCENTER_VMS
}

patch () {
  local job="bootstrap"
  cp -r ${terraform_dir}/${job}/. ${state_dir}/terraform
  env -i BASEDIR=${BASEDIR} \
    concourse_main_github_user="${concourse_main_github_user:-$user}" \
    concourse_main_github_org="${concourse_main_github_org}" \
    concourse_github_client="${concourse_github_client}" \
    concourse_github_secret="${concourse_github_secret}" \
    bash -c 'set -a ; . "${BASEDIR}/lib/env.sh" ; set +a ; jq -n env' > ${state_dir}/vars/${job}.tfvars
}

plan () {
  environment
  bbl plan --debug --state-dir ${state_dir}
}

up () {
  environment
  bbl up --debug --state-dir ${state_dir}
}

deploy () {
  eval "$(bbl print-env)"
  deploy_concourse
  deploy_credhub
}

deploy_concourse () {
  bosh -e "$(bbl env-id)" deploy -d concourse ${work_dir}/concourse/cluster/concourse.yml \
    -l ${work_dir}/concourse/versions.yml \
    --vars-store ${work_dir}/bootstrap/concourse-vars.yml \
    -o ${work_dir}/concourse/cluster/operations/static-web.yml \
    -o ${work_dir}/concourse/cluster/operations/tls-port.yml \
    -o ${work_dir}/concourse/cluster/operations/tls-vars.yml \
    -o ${work_dir}/concourse/cluster/operations/tls.yml \
    -o ${work_dir}/concourse/cluster/operations/github-auth.yml \
    --var web_vm_type=${concourse_web_vm_type:-medium} \
    --var db_vm_type=${concourse_db_vm_type:-medium} \
    --var db_persistent_disk_type=${concourse_db_disk_type:-50GB} \
    --var worker_vm_type=${concourse_worker_vm_type:-medium}
}

deploy_credhub () {
  bosh -e "$(bbl env-id)" deploy -d credhub ${work_dir}/credhub/sample-manifests/credhub-postgres-uaa.yml \
    --vars-store ${work_dir}/bootstrap/credhub-vars.yml
}

login() {
  eval "$(bbl print-env)"
  export BOSH_ENVIRONMENT=$(bbl director-address)
  bosh alias-env $(bbl env-id)
  bosh log-in
}

down () {
  environment
  bbl down --debug --state-dir ${state_dir}
}

if [ $# -gt 0 ]; then
  while [ $# -gt 0 ]; do
    case $1 in
      prepare )
        prepare
        ;;
      plan )
        plan
        ;;
      patch )
        patch
        ;;
      up )
        up
        ;;
      deploy )
        deploy
        ;;
      login )
        login
        ;;
      down )
        down
        ;;
      concourse )
        deploy_concourse
        ;;
      credhub )
        deploy_credhub
        ;;
      * )
        echo "Unrecognized option: $1" 1>&2
        exit 1
        ;;
    esac
    shift
    exit
  done
fi

prepare
plan
patch
up
login
deploy
