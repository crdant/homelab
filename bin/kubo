#!/usr/bin/env bash
BASEDIR=`dirname $0`/..
. "${BASEDIR}/lib/env.sh"
. "${BASEDIR}/lib/generate_passphrase.sh"
. "${BASEDIR}/lib/secrets.sh"
set -e

concourse_team=pcf
concourse_target=${env_id}-${concourse_team}
kubo_install_pipeline="deploy-kubo"
pipeline_file="${pipeline_dir}/install-kubo/pipeline.yml"
parameter_file="${work_dir}/${env_id}-${kubo_install_pipeline}-params.yml"
parameter_source="${pipeline_dir}/install-kubo/params.yml"

secret_root="concourse/${concourse_team}/${kubo_install_pipeline}"

prepare () {
  echo
}

pave () {
  echo
}

download () {
  echo
}

set_value () {
  local name=${1}
  local value=${2}
  credhub set --type value --name "${secret_root}/${name}" --value "${value}"
}

set_key () {
  local name=${1}
  local value=${2}
  credhub set --type ssh --name "${secret_root}/${name}" --private "${value}"
}

generate_credential () {
  local name=${1}
  local user=${2}
  credhub set --type user --name ${secret_root}/${name} --username ${user} --password "$(generate_passphrase 4)"
}

generate_value () {
  local name=${1}
  credhub set --type value --name ${secret_root}/${name} --value "$(generate_passphrase 4)"
}

get_secret () {
  local name=${1}
  credhub get --name ${secret_root}/${name} --output-json | jq --raw-output .value
}

secrets () {
  echo "Configuring secrets at ${secret_root}..."
  set_key git "$(cat ${HOME}/.ssh/concourse_github)"
  set_value pivnet_token ${PIVNET_TOKEN}
  generate_credential kubo-vcenter-user ${kubo_vsphere_user}
  generate_credential kubo-storage-user ${kubo_storage_user}
}

params () {
  container_base=$(echo ${container_cidr} | awk -F. '{print $1 "." $2 "." $3}')
  container_gateway="${container_base}.1"
  container_ex_limit="${container_base}.9"

  # TO DO: look up
  nats_internal_ips="${deployment_network}"

  om_ip="${ip_base}.10"

  bosh int \
    --var env-id=${env_id} \
    --var git-user=${git_user} \
    --var git-server=${git_server} \
    --var state-repo=${kubo_state_repo} \
    --var subdomain=${subdomain} \
    --var system-prefix=${pcf_system_prefix} \
    --var apps-prefix=${pcf_apps_prefix} \
    --var fast-storage=${vcenter_fast_datastore} \
    --var slow-storage=${vcenter_slow_datastore} \
    --var vcenter-host=${vcenter_host} \
    --var vcenter-datacenter=${vcenter_data_center} \
    --var vcenter-cluster=${vcenter_cluster} \
    --var vcenter-resource-pool=${vcenter-resource-pool-1} \
    --var container-network=${container_network} \
    --var container-cidr=${container_cidr} \
    --var container-gateway=${container_gateway} \
    --var container-excluded=${container_gateway}-${container_ex_limit} \
    --var dns-servers=${dns_servers} \
    --var kubo-network-name=${container_network} \
    --var reserved-ips=${container_gateway}-${container_ex_limit} \
    --var pcf-nats-internal-ips=${nats_internal_ips} \
    ${parameter_source} > ${parameter_file}

    sed -i -e 's/null/""/g' "${parameter_file}"
}

concourse_login() {
  local pcf_concourse_username="$(get_bootstrap_credential_username concourse ${concourse_team})"
  local pcf_concourse_password="$(get_bootstrap_credential_password concourse ${concourse_team})"
  fly --target ${concourse_target} login -k --team-name ${concourse_team} --concourse-url=${concourse_url} --username=${pcf_concourse_username} --password=${pcf_concourse_password}
}

pipeline () {
  concourse_login
  fly --target ${concourse_target} set-pipeline --pipeline ${kubo_install_pipeline} \
    --config ${pipeline_file} --load-vars-from ${parameter_file}
  fly --target ${concourse_target} unpause-pipeline --pipeline ${kubo_install_pipeline}
}

install () {
  echo
}

teardown () {
  echo
}

cleanup () {
  echo
}

trigger() {
  job="${1}"
  echo "Triggering job ${1}"
  fly --target ${concourse_target} trigger-job -j ${kubo_install_pipeline}/${job}
  fly --target ${concourse_target} watch -j ${kubo_install_pipeline}/${job}
}

hijack() {
  job="${1}"
  echo "Hijacking job ${1}"
  fly --target ${concourse_target} hijack -j ${kubo_install_pipeline}/${job}
}


if [ $# -gt 0 ]; then
  while [ $# -gt 0 ]; do
    case $1 in
      prepare )
        prepare
        ;;
      pave )
        pave
        ;;
      login )
        login
        ;;
      down )
        down
        ;;
      download)
        download
        ;;
      secrets )
        secrets
        ;;
      params )
        params
        ;;
      pipeline | pipelines )
        pipeline
        ;;
      install )
        install
        ;;
      cleanup )
        cleanup
        ;;
      trigger)
        trigger "${2}"
        shift
        ;;
      hijack)
        hijack "${2}"
        shift
        ;;
      teardown)
        teardown
        ;;
      get_secret)
        get_secret "${2}"
        shift
        ;;
      set_secret)
        set_value "${2}" "${3}"
        shift 2
        ;;
      * )
        echo "Unrecognized option: $1" 1>&2
        exit 1
        ;;
    esac
    shift
    exit
  done
fi

prepare
up
login
