#!/usr/bin/env bash
BASEDIR=`dirname $0`/..
. "${BASEDIR}/lib/env.sh"
. "${BASEDIR}/lib/generate_passphrase.sh"
. "${BASEDIR}/lib/secrets.sh"
set -e

concourse_team=pcf
concourse_target=${env_id}-${concourse_team}
kubo_install_pipeline="deploy-kubo"
pipeline_file="${pipeline_dir}/install-kubo/pipeline.yml"
parameter_file="${work_dir}/${env_id}-${kubo_install_pipeline}-params.yml"
parameter_source="${pipeline_dir}/install-kubo/params.yml"

secret_root="concourse/${concourse_team}/${kubo_install_pipeline}"

prepare () {
  # create users
  # TO DO: debug password setting and return to script
  # generate_credential kubo-vsphere-account ${kubo_director_user}
  # generate_credential kubo-storage-account ${kubo_storage_user}
  # local kubo_vsphere_password=$(get_password kubo-vsphere-account)
  # ${BASEDIR}/bin/vcenter user create ${kubo_director_user} ${kubo_vsphere_password} Kubo Director
  #
  # local kubo_storage_password=$(get_password kubo-storage-account)
  # ${BASEDIR}/bin/vcenter user create ${kubo_storage_user} ${kubo_storage_password} Kubo Storage

  # create storage role and assign to group
  roles
  groups

  # assign roles by adding services accounts to groups
  ${BASEDIR}/bin/vcenter group add "${bosh_director_group}" "${kubo_director_user}"
  ${BASEDIR}/bin/vcenter group add "${kubo_storage_group}" "${kubo_storage_user}"
}

roles () {
  if [ -z "${vcenter_admin_password}" ] ; then
    vcenter_admin_password="$(op get item 'vCenter (Home Lab)' | jq -r '.details.fields[] | select(.designation == "password" ).value')"
  fi
  (
    GOVC_INSECURE=1
    GOVC_URL=${vcenter_host}
    GOVC_USERNAME=${vcenter_admin}
    GOVC_PASSWORD=${vcenter_admin_password}

    govc role.create ${kubo_director_role} \
      Datastore.AllocateSpace \
      Datastore.Browse \
      Datastore.DeleteFile \
      Datastore.FileManagement \
      Datastore.UpdateVirtualMachineFiles \
      Datastore.UpdateVirtualMachineMetadata \
      Folder.Create \
      Folder.Delete \
      Folder.Move \
      Folder.Rename \
      Global.ManageCustomFields \
      Global.SetCustomField \
      Host.Inventory.EditCluster \
      Host.Local.CreateVM \
      Host.Local.DeleteVM \
      Host.Local.InstallAgent \
      Host.Local.ManageUserGroups \
      Host.Local.ReconfigVM \
      InventoryService.Tagging.AttachTag \
      InventoryService.Tagging.CreateCategory \
      InventoryService.Tagging.CreateTag \
      InventoryService.Tagging.DeleteCategory \
      InventoryService.Tagging.DeleteTag \
      InventoryService.Tagging.EditCategory \
      InventoryService.Tagging.EditTag \
      InventoryService.Tagging.ModifyUsedByForCategory \
      InventoryService.Tagging.ModifyUsedByForTag \
      Network.Assign \
      Network.Config \
      Network.Delete \
      Network.Move \
      Resource.AssignVMToPool \
      Resource.ColdMigrate \
      Resource.HotMigrate \
      System.Anonymous \
      System.Read \
      System.View \
      VApp.ApplicationConfig \
      VApp.AssignResourcePool \
      VApp.AssignVApp \
      VApp.AssignVM \
      VApp.Clone \
      VApp.Create \
      VApp.Delete \
      VApp.Export \
      VApp.ExtractOvfEnvironment \
      VApp.Import \
      VApp.InstanceConfig \
      VApp.ManagedByConfig \
      VApp.Move \
      VApp.PowerOff \
      VApp.PowerOn \
      VApp.Rename \
      VApp.ResourceConfig \
      VApp.Suspend \
      VApp.Unregister \
      VirtualMachine.Config.AddExistingDisk \
      VirtualMachine.Config.AddNewDisk \
      VirtualMachine.Config.AddRemoveDevice \
      VirtualMachine.Config.AdvancedConfig \
      VirtualMachine.Config.Annotation \
      VirtualMachine.Config.CPUCount \
      VirtualMachine.Config.ChangeTracking \
      VirtualMachine.Config.DiskExtend \
      VirtualMachine.Config.DiskLease \
      VirtualMachine.Config.EditDevice \
      VirtualMachine.Config.HostUSBDevice \
      VirtualMachine.Config.ManagedBy \
      VirtualMachine.Config.Memory \
      VirtualMachine.Config.MksControl \
      VirtualMachine.Config.QueryFTCompatibility \
      VirtualMachine.Config.QueryUnownedFiles \
      VirtualMachine.Config.RawDevice \
      VirtualMachine.Config.ReloadFromPath \
      VirtualMachine.Config.RemoveDisk \
      VirtualMachine.Config.Rename \
      VirtualMachine.Config.ResetGuestInfo \
      VirtualMachine.Config.Resource \
      VirtualMachine.Config.Settings \
      VirtualMachine.Config.SwapPlacement \
      VirtualMachine.Config.ToggleForkParent \
      VirtualMachine.Config.Unlock \
      VirtualMachine.Config.UpgradeVirtualHardware \
      VirtualMachine.GuestOperations.Execute \
      VirtualMachine.GuestOperations.Modify \
      VirtualMachine.GuestOperations.ModifyAliases \
      VirtualMachine.GuestOperations.Query \
      VirtualMachine.GuestOperations.QueryAliases \
      VirtualMachine.Interact.AnswerQuestion \
      VirtualMachine.Interact.Backup \
      VirtualMachine.Interact.ConsoleInteract \
      VirtualMachine.Interact.CreateScreenshot \
      VirtualMachine.Interact.CreateSecondary \
      VirtualMachine.Interact.DefragmentAllDisks \
      VirtualMachine.Interact.DeviceConnection \
      VirtualMachine.Interact.DisableSecondary \
      VirtualMachine.Interact.DnD \
      VirtualMachine.Interact.EnableSecondary \
      VirtualMachine.Interact.GuestControl \
      VirtualMachine.Interact.MakePrimary \
      VirtualMachine.Interact.Pause \
      VirtualMachine.Interact.PowerOff \
      VirtualMachine.Interact.PowerOn \
      VirtualMachine.Interact.PutUsbScanCodes \
      VirtualMachine.Interact.Record \
      VirtualMachine.Interact.Replay \
      VirtualMachine.Interact.Reset \
      VirtualMachine.Interact.SESparseMaintenance \
      VirtualMachine.Interact.SetCDMedia \
      VirtualMachine.Interact.SetFloppyMedia \
      VirtualMachine.Interact.Suspend \
      VirtualMachine.Interact.TerminateFaultTolerantVM \
      VirtualMachine.Interact.ToolsInstall \
      VirtualMachine.Interact.TurnOffFaultTolerance \
      VirtualMachine.Inventory.Create \
      VirtualMachine.Inventory.CreateFromExisting \
      VirtualMachine.Inventory.Delete \
      VirtualMachine.Inventory.Move \
      VirtualMachine.Inventory.Register \
      VirtualMachine.Inventory.Unregister \
      VirtualMachine.Namespace.Event \
      VirtualMachine.Namespace.EventNotify \
      VirtualMachine.Namespace.Management \
      VirtualMachine.Namespace.ModifyContent \
      VirtualMachine.Namespace.Query \
      VirtualMachine.Namespace.ReadContent \
      VirtualMachine.Provisioning.Clone \
      VirtualMachine.Provisioning.CloneTemplate \
      VirtualMachine.Provisioning.CreateTemplateFromVM \
      VirtualMachine.Provisioning.Customize \
      VirtualMachine.Provisioning.DeployTemplate \
      VirtualMachine.Provisioning.DiskRandomAccess \
      VirtualMachine.Provisioning.DiskRandomRead \
      VirtualMachine.Provisioning.FileRandomAccess \
      VirtualMachine.Provisioning.GetVmFiles \
      VirtualMachine.Provisioning.MarkAsTemplate \
      VirtualMachine.Provisioning.MarkAsVM \
      VirtualMachine.Provisioning.ModifyCustSpecs \
      VirtualMachine.Provisioning.PromoteDisks \
      VirtualMachine.Provisioning.PutVmFiles \
      VirtualMachine.Provisioning.ReadCustSpecs \
      VirtualMachine.State.CreateSnapshot \
      VirtualMachine.State.RemoveSnapshot \
      VirtualMachine.State.RenameSnapshot \
      VirtualMachine.State.RevertToSnapshot

    govc role.create ${kubo_storage_role} \
      Datastore.AllocateSpace \
      Datastore.FileManagement \
      VirtualMachine.Config.AddExistingDisk \
      VirtualMachine.Config.AddRemoveDevice \
      VirtualMachine.Config.RemoveDisk
  )
}

groups () {
  ${BASEDIR}/bin/vcenter group create "${kubo_director_group}"
  ${BASEDIR}/bin/vcenter group assign "${kubo_director_role}" "${kubo_director_group}"

  ${BASEDIR}/bin/vcenter group create "${kubo_storage_group}"
  ${BASEDIR}/bin/vcenter group assign "${kubo_storage_role}" "${kubo_storage_group}"
}

pave () {
  if [ -z "${vcenter_admin_password}" ] ; then
    vcenter_admin_password="$(op get item 'vCenter (Home Lab)' | jq -r '.details.fields[] | select(.designation == "password" ).value')"
  fi
  (
    GOVC_INSECURE=1
    GOVC_URL=${vcenter_host}
    GOVC_USERNAME=${vcenter_admin}
    GOVC_PASSWORD="${vcenter_admin_password}"

    govc dvs.portgroup.add -dvs ${pcf_switch} -type earlyBinding -nports 1024 ${container_network}
  )
}

set_value () {
  local name=${1}
  local value=${2}
  credhub set --type value --name "${secret_root}/${name}" --value "${value}"
}

set_key () {
  local name=${1}
  local value=${2}
  credhub set --type ssh --name "${secret_root}/${name}" --private "${value}"
}

set_credential () {
  local name=${1}
  local user=${2}
  local password=${3}
  credhub set --type user --name ${secret_root}/${name} --username ${user} --password=${password}
}

generate_credential () {
  local name=${1}
  local user=${2}
  credhub generate -S -l 25 --type user --name ${secret_root}/${name} --username ${user}
}

get_password () {
  local name=${1}
  credhub get --name ${secret_root}/${name} --output-json | jq -r .value.password
}

generate_value () {
  local name=${1}
  credhub set --type value --name ${secret_root}/${name} --value "$(generate_passphrase 4)"
}

get_secret () {
  local name=${1}
  credhub get --name ${secret_root}/${name} --output-json | jq --raw-output .value.password
}

secrets () {
  echo "Configuring secrets at ${secret_root}..."
  set_key git "$(cat ${HOME}/.ssh/concourse_github)"
  set_value pivnet_token ${PIVNET_TOKEN}
  set_credential pcf-nats $(pivotalcf credential cf .nats.credentials identity) $(pivotalcf credential cf .nats.credentials password)
  generate_credential pcf-routing-client ${env_id}_routing_api_client
  generate_credential kubo-pcf-account ${env_id}-kubo
}

uaa () {
  local routing_client_secret="$(get_secret pcf-routing-client ${routing_client_id})"
  local uaa_secret=$(pivotalcf credential cf .uaa.admin_client_credentials password)

  # create routing client
  uaac target uaa.${pcf_system_prefix}.${subdomain} --skip-ssl-validation
  uaac token client get admin --secret "${uaa_secret}"
  uaac client add "${env_id}_routing_api_client" --secret "${routing_client_secret}" \
    --authorities "routing.router_groups.read,routing.routes.write,cloud_controller.admin" --authorized_grant_types "client_credentials"

  local kubo_pcf_account_password="$(get_password kubo-pcf-account)"
  # create user for deploying the broker
  uaac user add ${env_id}-kubo -p ${kubo_pcf_account_password} --emails ${env_id}-kubo@${domain}
  uaac member add cloud_controller.admin ${env_id}-kubo
  uaac member add scim.read ${env_id}-kubo
}

params () {
  container_base=$(echo ${container_cidr} | awk -F. '{print $1 "." $2 "." $3}')
  container_gateway="${container_base}.1"
  container_ex_limit="${container_base}.9"

  # TO DO: look up
  deployment_base=$(echo ${deployment_cidr} | awk -F. '{print $1 "." $2 "." $3}')
  nats_internal_ips="${deployment_base}.10"

  OIFS=${IFS}
  IFS=','
  dns_array=(${dns_servers})
  nats_array=(${nats_internal_ips})
  IFS=${OIFS}

  director_ip="${container_base}.6"

  bosh int \
    --var env-id=${env_id} \
    --var git-user=${git_user} \
    --var git-server=${git_server} \
    --var git-email=${email} \
    --var state-repo=${kubo_state_repo} \
    --var subdomain=${subdomain} \
    --var system-prefix=${pcf_system_prefix} \
    --var apps-prefix=${pcf_apps_prefix} \
    --var fast-storage=${vcenter_fast_datastore} \
    --var slow-storage=${vcenter_slow_datastore} \
    --var vcenter-host=${vcenter_host} \
    --var vcenter-datacenter=${vcenter_data_center} \
    --var vcenter-cluster=${vcenter_cluster} \
    --var vcenter-resource-pool=${vcenter_resource_pool_2} \
    --var director-ip=${director_ip} \
    --var container-network=${container_network} \
    --var container-cidr=${container_cidr} \
    --var container-gateway=${container_gateway} \
    --var container-excluded=${container_gateway}-${container_ex_limit} \
    --var dns-server-1=${dns_array[0]} \
    --var pcf-nats-internal-ip-1=${nats_array[0]} \
    --var kubo-network-name=${container_network} \
    --var reserved-ips=${container_gateway}-${container_ex_limit} \
    --var pcf-nats-internal-ips=${nats_internal_ips} \
    ${parameter_source} > ${parameter_file}

    sed -i -e 's/null/""/g' "${parameter_file}"
}

concourse_login() {
  local pcf_concourse_username="$(get_bootstrap_credential_username concourse ${concourse_team})"
  local pcf_concourse_password="$(get_bootstrap_credential_password concourse ${concourse_team})"
  fly --target ${concourse_target} login -k --team-name ${concourse_team} --concourse-url=${concourse_url} --username=${pcf_concourse_username} --password=${pcf_concourse_password}
}

pipeline () {
  concourse_login
  fly --target ${concourse_target} set-pipeline --pipeline ${kubo_install_pipeline} \
    --config ${pipeline_file} --load-vars-from ${parameter_file}
  fly --target ${concourse_target} unpause-pipeline --pipeline ${kubo_install_pipeline}
}

install () {
  trigger "configure-director"
}

teardown () {
  echo
}

cleanup () {
  echo
}

trigger() {
  job="${1}"
  echo "Triggering job ${1}"
  fly --target ${concourse_target} trigger-job -j ${kubo_install_pipeline}/${job}
  fly --target ${concourse_target} watch -j ${kubo_install_pipeline}/${job}
}

hijack() {
  job="${1}"
  echo "Hijacking job ${1}"
  concourse_login
  fly --target ${concourse_target} hijack -j ${kubo_install_pipeline}/${job}
}


if [ $# -gt 0 ]; then
  while [ $# -gt 0 ]; do
    case $1 in
      prepare )
        prepare
        ;;
      pave )
        pave
        ;;
      login )
        concourse_login
        ;;
      secrets )
        secrets
        ;;
      uaa )
        uaa
        ;;
      params )
        params
        ;;
      pipeline | pipelines )
        pipeline
        ;;
      install )
        install
        ;;
      cleanup )
        cleanup
        ;;
      trigger)
        trigger "${2}"
        shift
        ;;
      hijack)
        hijack "${2}"
        shift
        ;;
      teardown)
        teardown
        ;;
      get_secret)
        get_secret "${2}"
        shift
        ;;
      set_secret)
        set_value "${2}" "${3}"
        shift 2
        ;;
      * )
        echo "Unrecognized option: $1" 1>&2
        exit 1
        ;;
    esac
    shift
  done
  exit
fi

prepare
pave
install
