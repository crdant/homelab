#!/usr/bin/env bash
BASEDIR=`dirname $0`/..
. "${BASEDIR}/lib/env.sh"
. "${BASEDIR}/lib/generate_passphrase.sh"
. "${BASEDIR}/lib/secrets.sh"
set -e

concourse_team=pcf
concourse_target=${env_id}-${concourse_team}
concourse_url=$(bootstrap url)
pcf_concourse_user=pivotal

pcf_install_pipeline="deploy-pcf"
pcf_pipelines_remote="https://github.com/pivotal-cf/pcf-pipelines.git"
pcf_pipelines_local=${work_dir}/pcf-pipelines
pcf_pipelines_version="v0.18.0"
pipeline_file="${work_dir}/pcf-pipelines/install-pcf/vsphere/pipeline.yml"
parameter_file="${work_dir}/${env_id}-${pcf_install_pipeline}-params.yml"
parameter_source="${pipeline_dir}/install-pcf/params.yml"

secret_root="concourse/${concourse_team}/${pcf_install_pipeline}"

prepare_concourse() {
  concourse_admin="admin"
  admin="$(bootstrap password concourse)"
  fly --target ${env_id} login -k --team-name main --concourse-url=${concourse_url} --username=${concourse_admin} --password=${admin}
  fly --target ${env_id} sync

  generate_bootstrap_credential concourse "${concourse_team}" "${pcf_concourse_user}"
  pcf_concourse="$(get_bootstrap_credential_password concourse "${concourse_team}")"
  fly --target ${env_id} set-team --team-name ${concourse_team} --basic-auth-username=${pcf_concourse_user} --basic-auth-password=${pcf_concourse}
}

concourse_login() {
  local pcf_concourse_username="$(get_bootstrap_credential_username concourse ${concourse_team})"
  local pcf_concourse_password="$(get_bootstrap_credential_password concourse ${concourse_team})"
  fly --target ${concourse_target} login -k --team-name ${concourse_team} --concourse-url=${concourse_url} --username=${pcf_concourse_username} --password=${pcf_concourse_password}
}

download () {
  pivnet login --api-token ${PIVNET_TOKEN}
  pivnet download-product-files --product-slug pcf-automation --release-version ${pcf_pipelines_version} --download-dir ${work_dir} --glob "pcf-pipelines-${pcf_pipelines_version}.tgz" --accept-eula
  tar -xzf "${work_dir}/pcf-pipelines-${pcf_pipelines_version}.tgz" -C "${work_dir}"
  transform_pipeline
}

transform_pipeline() {
  sed -i -e 's/{{/((/g' "${pipeline_file}"
  sed -i -e 's/}}/))/g' "${pipeline_file}"
  sed -i -e 's/_private_key/.private_key/g' "${pipeline_file}"
  sed -i -e 's/_username/.username/g' "${pipeline_file}"
  sed -i -e 's/_password/.password/g' "${pipeline_file}"
  # we aren't doing anything with NSX, but it gets caught up in the previous replace
  sed -i -e 's/nsx.username/nsx_username/g' "${pipeline_file}"
  sed -i -e 's/nsx.password/nsx_password/g' "${pipeline_file}"
  # also gets caught up in previous replace
  sed -i -e 's/saml_ssl.private_key/saml_ssl_private_key/g' "${pipeline_file}"
  sed -i -e 's/ssl.private_key/ssl_private_key/g' "${pipeline_file}"

  cp ${pipeline_file} ${pipeline_file}.bak
  bosh int --ops-file "${ops_dir}/config-srt.yml" "${pipeline_file}.bak" > ${pipeline_file}
}

get_credential () {
  local product=${1}
  local credential=${2}
  local field=${3}
  if [ -z "${field}" ] ; then
    field="password"
  fi
  credential=$(om -k --target https://opsman.${pcf_subdomain} --username `safe get ${secret_root}/pcf_opsman_admin_username:value` --password `safe get ${secret_root}/pcf_opsman_admin:value` --skip-ssl-validation credentials --product-name ${product} --credential-reference ${credential} --credential-field ${field})
  echo $credential
}

set_value () {
  local name=${1}
  local value=${2}
  credhub set --type value --name "${secret_root}/${name}" --value "${value}"
}

set_key () {
  local name=${1}
  local value=${2}
  credhub set --type ssh --name "${secret_root}/${name}" --private "${value}"
}

generate_credential () {
  local name=${1}
  local user=${2}
  credhub set --type user --name ${secret_root}/${name} --username ${user} --password "$(generate_passphrase 4)"
}

generate_value () {
  local name=${1}
  credhub set --type value --name ${secret_root}/${name} --value "$(generate_passphrase 4)"
}

get_secret () {
  local name=${1}
  credhub get --name ${secret_root}/${name} --output-json | jq --raw-output .value
}

secrets () {
  echo "Configuring secrets at ${secret_root}..."
  set_key git "$(cat ${HOME}/.ssh/concourse_github)"
  set_value pivnet_token ${PIVNET_TOKEN}
  generate_credential opsman_admin ${om_admin_user}
  generate_value om-ssh-password
  generate_value om-decrypt-password
}

params() {
  infrastructure_base=$(echo ${infrastructure_cidr} | awk -F. '{print $1 "." $2 "." $3}')
  infrastructure_gateway="${infrastructure_base}.1"
  infrastructure_ex_limit="${infrastructure_base}.9"

  deployment_base=$(echo ${deployment_cidr} | awk -F. '{print $1 "." $2 "." $3}')
  deployment_gateway="${deployment_base}.1"
  deployment_ex_limit="${deployment_base}.9"

  router_static_ips=${deployment_base}.240,${deployment_base}.241,${deployment_base}.242
  tcp_router_static_ips=${deployment_base}.243,${deployment_base}.244,${deployment_base}.245
  brain_static_ips=${deployment_base}.250,${deployment_base}.251,${deployment_base}.252

  services_base=$(echo ${services_cidr} | awk -F. '{print $1 "." $2 "." $3}')
  services_gateway="${services_base}.1"
  services_ex_limit="${services_base}.9"

  dynamic_base=$(echo ${dynamic_cidr} | awk -F. '{print $1 "." $2 "." $3}')
  dynamic_gateway="${dynamic_base}.1"
  dynamic_ex_limit="${dynamic_base}.9"

  om_ip="${ip_base}.10"

  bosh int \
    --var env-id=${env_id} \
    --var subdomain=${subdomain} \
    --var om-data-store=${vcenter_fast_datastore} \
    --var om-host-name=${om_host_name} \
    --var ntp-servers=${ntp_servers} \
    --var dns-servers=${dns_servers} \
    --var om-netmask=${infrastructure_netmask} \
    --var om-ip-address=${om_ip_address} \
    --var vcenter-host=${vcenter_host} \
    --var vcenter-data-center=${vcenter_data_center} \
    --var vcenter-cluster=${vcenter_cluster} \
    --var vcenter-resource-pool-1=${vcenter_resource_pool_1} \
    --var vcenter-resource-pool-2=${vcenter_resource_pool_2} \
    --var vcenter-resource-pool-3=${vcenter_resource_pool_3} \
    --var fast-storage=${vcenter_fast_datastore} \
    --var slow-storage=${vcenter_slow_datastore} \
    --var director-host-name=${director_host_name} \
    --var infrastructure-network=${infrastructure_network} \
    --var infrastructure-cidr=${infrastructure_cidr} \
    --var infrastructure-gateway=${infrastructure_gateway} \
    --var infrastructure-excluded=${infrastructure_gateway}-${infrastructure_ex_limit} \
    --var deployment-network=${deployment_network} \
    --var deployment-cidr=${deployment_cidr} \
    --var deployment-gateway=${deployment_gateway} \
    --var deployment-excluded=${deployment_gateway}-${deployment_ex_limit} \
    --var services-network=${services_network} \
    --var services-cidr=${services_cidr} \
    --var services-gateway=${services_gateway} \
    --var services-excluded=${services_gateway}-${services_ex_limit} \
    --var dynamic-network=${dynamic_network} \
    --var dynamic-cidr=${dynamic_cidr} \
    --var dynamic-gateway=${dynamic_gateway} \
    --var dynamic-excluded=${dynamic_gateway}-${dynamic_ex_limit} \
    --var router-static-ips=${router_static_ips} \
    --var tcp-router-static-ips=${tcp_router_static_ips} \
    --var ssh-static-ips=${brain_static_ips} \
    --var mysql-monitor-email=${email} \
    ${parameter_source} > ${parameter_file}

    sed -i -e 's/null/""/g' "${parameter_file}"
}

pipeline () {
  concourse_login
  fly --target ${concourse_target} set-pipeline --pipeline ${pcf_install_pipeline} \
    --config ${pipeline_file} --load-vars-from ${parameter_file}
  fly --target ${concourse_target} unpause-pipeline --pipeline ${pcf_install_pipeline}
}

trigger() {
  job="${1}"
  echo "Triggering job ${1}"
  fly --target ${concourse_target} trigger-job -j ${pcf_install_pipeline}/${job}
  fly --target ${concourse_target} watch -j ${pcf_install_pipeline}/${job}
}

hijack() {
  job="${1}"
  echo "Hijacking job ${1}"
  fly --target ${concourse_target} hijack -j ${pcf_install_pipeline}/${job}
}

create_infrastructure () {
  echo "Creating PCF infrastructure..."
  trigger "create-infrastructure"
  dns
}

# dns () {
#   # TODO: trap errors and delete transaction file for sanity (mayhaps just rollback with gcloud dns)
#   echo "Delegating DNS..."
#   local name_servers=( `gcloud dns managed-zones describe "${pcf_dns_zone}" --format json | jq -r  '.nameServers | join(" ")'` )
#   local transaction_file="${work_dir}/pcf-dns-transaction-${pcf_dns_zone}.xml"
#
#   gcloud dns record-sets transaction start -z "${pcf_dns_zone}" --transaction-file="${transaction_file}" --no-user-output-enabled
#
#   gcloud dns record-sets transaction add -z "${pcf_dns_zone}" --name "${pcf_subdomain}" --ttl "${dns_ttl}" --type NS "${name_servers[0]}" --transaction-file="${transaction_file}" --no-user-output-enabled
#   gcloud dns record-sets transaction add -z "${pcf_dns_zone}" --name "${pcf_subdomain}" --ttl "${dns_ttl}" --type NS "${name_servers[1]}" --transaction-file="${transaction_file}" --no-user-output-enabled
#   gcloud dns record-sets transaction add -z "${pcf_dns_zone}" --name "${pcf_subdomain}" --ttl "${dns_ttl}" --type NS "${name_servers[2]}" --transaction-file="${transaction_file}" --no-user-output-enabled
#   gcloud dns record-sets transaction add -z "${pcf_dns_zone}" --name "${pcf_subdomain}" --ttl "${dns_ttl}" --type NS "${name_servers[3]}" --transaction-file="${transaction_file}" --no-user-output-enabled
#
#   gcloud dns record-sets transaction execute -z "${pcf_dns_zone}" --transaction-file="${transaction_file}" --no-user-output-enabled
# }

deploy_ops_manager () {
  echo "Deploying Ops Manger Director..."
  trigger "deploy-opsman"
}

configure_director() {
  echo "Configuring Ops Manger Director..."
  trigger "configure-director"
}

install() {
  deploy_ops_manager
  configure_director
}

wipe_env() {
  fly --target ${concourse_target} trigger-job -j ${pcf_install_pipeline}/wipe-env
  fly --target ${concourse_target} watch -j ${pcf_install_pipeline}/wipe-env
}

teardown() {
  wipe_env
  fly --target ${concourse_target} destroy-pipeline -p "${pcf_install_pipeline}"
}

if [ $# -gt 0 ]; then
  while [ $# -gt 0 ]; do
    case $1 in
      prepare_concourse | prepare )
        prepare_concourse
        ;;
      concourse_login | login )
        concourse_login
        ;;
      download)
        download
        ;;
      secrets )
        secrets
        ;;
      params )
        params
        ;;
      pipeline | pipelines )
        pipeline
        ;;
      install )
        install
        ;;
      deploy )
        download
        pipeline
        install
        ;;
      configure_director | director)
        configure_director
        ;;
      deploy_ops_manager | deploy_opsman | opsman)
        deploy_ops_manager
        ;;
      wipe_env | wipe)
        wipe_env
        ;;
      dns)
        dns
        ;;
      get_credential | credential)
        get_credential "${2}" "${3}" "${4}"
        shift 3
        ;;
      trigger)
        trigger "${2}"
        shift
        ;;
      hijack)
        hijack "${2}"
        shift
        ;;
      teardown)
        teardown
        ;;
      get_secret)
        get_secret "${2}"
        shift
        ;;
      set_secret)
        set_value "${2}" "${3}"
        shift 2
        ;;
      * )
        echo "Unrecognized option: $1" 1>&2
        exit 1
        ;;
    esac
    shift
  done
  exit
fi

prepare_concourse
concourse_login
download
secrets
params
pipeline
install
