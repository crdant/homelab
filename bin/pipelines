#!/usr/bin/env bash
#!/usr/bin/env bash
BASEDIR=`dirname $0`/..
. "${BASEDIR}/lib/env.sh"
. "${BASEDIR}/lib/generate_passphrase.sh"
. "${BASEDIR}/lib/terraform.sh"
set -e

concourse_github_client="$(security find-generic-password -a "Concourse Client" -s github.com -w)"
concourse_github_secret="$(security find-generic-password -a "Concourse Secret" -s github.com -w)"

# defaults that can be overridden in ${BASEDIR}/lib/env.sh, essentially these are currently
# per my most recent major rebuild
default_pcf_pipelines_version="v0.23.6"
default_github_user=${USER}

pcf_pipelines_work_dir="${work_dir}/pcf-pipelines"
sample_pipelines_work_dir="${work_dir}/concourse-pipeline-samples/pipelines"

om_install_pipeline_path="install-pcf/vsphere"
om_upgrade_pipeline_path="upgrade-ops-manager/vsphere"

tile_install_pipeline_path="vmware/install-harbor"
tile_upgrade_pipeline_path="upgrade-tile"

terraform_vars () {
  env -i BASEDIR=${BASEDIR} \
    pivnet_token=${PIVNET_TOKEN} \
    trusted_certificates="$(cat ${key_dir}/letsencrypt.pem)" \
    bash -c 'set -a ; . "${BASEDIR}/lib/env.sh" ; set +a ; jq -n env'
}

<<<<<<< Updated upstream
prepare_pipelines () {
=======
prepare () {
>>>>>>> Stashed changes
  download_pipelines
  setup_concourse
}

download_pipelines() {
  pivnet login --api-token ${PIVNET_TOKEN}
  pivnet download-product-files --product-slug pcf-automation --release-version ${pcf_pipelines_version:-$default_pcf_pipelines_version} \
    --download-dir ${work_dir} --glob "pcf-pipelines-${pcf_pipelines_version:-$default_pcf_pipelines_version}.tgz" --accept-eula
  tar -xzf "${work_dir}/pcf-pipelines-${pcf_pipelines_version:-$default_pcf_pipelines_version}.tgz" -C "${work_dir}"
  transform_pipelines

  if [ ! -d ${sample_pipelines_work_dir} ] ; then
    git clone https://github.com/pivotalservices/concourse-pipeline-samples.git ${sample_pipelines_work_dir}
  else
    pushd ${sample_pipelines_work_dir} > /dev/null
      git pull
    popd > /dev/null
  fi

  if [ ! -d ${work_dir}/prometheus ] ; then
    git clone https://github.com/bosh-prometheus/prometheus-boshrelease.git ${work_dir}/prometheus
  else
    pushd ${work_dir}/prometheus > /dev/null
      git pull
    popd > /dev/null
  fi
}

transform_pipelines() {
  local pipelines=( $om_install_pipeline_path $om_upgrade_pipeline_path $tile_install_pipeline_path $tile_upgrade_pipeline_path )

  for pipeline_path in "${pipelines[@]}"
  do
    if [ -f "${sample_pipelines_work_dir}/${pipeline_path}/pipeline.yml" ] ; then
      pipeline_file="${sample_pipelines_work_dir}/${pipeline_path}/pipeline.yml"
    else
      pipeline_file="${pcf_pipelines_work_dir}/${pipeline_path}/pipeline.yml"
    fi
    echo "transforming ${pipeline_file}"

    # new style replacement
    sed -i '' -e 's/{{/((/g' "${pipeline_file}"
    sed -i '' -e 's/}}/))/g' "${pipeline_file}"

    # apply operations files
    if [ -d "${pipelines_dir}/${pipeline_path}/ops" ] ; then
      ops_files="$(ls ${pipelines_dir}/${pipeline_path}/ops | sort)"
      for ops_file in "${ops_files[@]}"
      do
        ops_file="${pipelines_dir}/${pipeline_path}/ops/${ops_file}"
        cp ${pipeline_file} ${pipeline_file}.orig
        cat "${pipeline_file}.orig" | yaml-patch -o ${ops_file} > ${pipeline_file}
      done
    fi
  done
}

setup_concourse () {
  outputs="$(outputs pipelines)"
  team_name="$(echo "${outputs}" | jq --raw-output .pcf_concourse_team.value)"
  username="$(echo "${outputs}" | jq --raw-output .pcf_concourse_user.value)"
  fly --target "${env_id}" set-team --team-name ${team_name} --local-user=${concourse_pcf_local_user} --github-user="${concourse_pcf_github_user:-$default_github_user}"
  fly --target "${env_id}-pcf" login --team-name ${team_name} --concourse-url=${concourse_url} --ca-cert=${ca_cert_file} --username="${concourse_pcf_local_username}" --password="${concourse_pcf_local_password}"
}

set_pipelines () {
  set_opsman_pipelines
  set_tile_pipelines "harbor"
  set_pks_pipelines
  set_tile_pipelines "pas"
  set_tile_pipelines "minio"
}

set_opsman_pipelines () {
  outputs="$(outputs pipelines)"
  om_install_pipeline="$(echo "${outputs}" | jq --raw-output .om_install_pipeline.value)"
  om_upgrade_pipeline="$(echo "${outputs}" | jq --raw-output .om_upgrade_pipeline.value)"
  fly -t "${env_id}-pcf" set-pipeline --pipeline "${om_install_pipeline}" \
    --config "${pcf_pipelines_work_dir}/install-pcf/vsphere/pipeline.yml" \
    --load-vars-from "${work_dir}/pipelines/foundation.yml" \
    --load-vars-from "${work_dir}/pipelines/opsman/vars.yml"
  fly -t "${env_id}-pcf" set-pipeline --pipeline "${om_upgrade_pipeline}" \
    --config "${pcf_pipelines_work_dir}/upgrade-ops-manager/vsphere/pipeline.yml" \
    --load-vars-from "${work_dir}/pipelines/foundation.yml" \
    --load-vars-from "${work_dir}/pipelines/opsman/upgrade-vars.yml"
}

set_tile_pipelines () {
  tile="${1}"
  fly -t "${env_id}-pcf" set-pipeline --pipeline "deploy-${tile}" \
    --config "${sample_pipelines_work_dir}/vmware/install-harbor/pipeline.yml" \
    --load-vars-from "${work_dir}/pipelines/foundation.yml" \
    --load-vars-from "${work_dir}/pipelines/${tile}/product.yml" \
    --load-vars-from "${work_dir}/pipelines/${tile}/vars.yml"
  fly -t "${env_id}-pcf" set-pipeline --pipeline "upgrade-${tile}" \
    --config "${pcf_pipelines_work_dir}/upgrade-tile/pipeline.yml" \
    --load-vars-from "${work_dir}/pipelines/foundation.yml" \
    --load-vars-from "${work_dir}/pipelines/${tile}/product.yml"
}

set_pks_pipelines () {
  tile="pks"
  fly -t "${env_id}-pcf" set-pipeline --pipeline "deploy-${tile}" \
    --config "${sample_pipelines_work_dir}/pcf/pks/install-pks/pipeline.yml" \
    --load-vars-from "${work_dir}/pipelines/foundation.yml" \
    --load-vars-from "${work_dir}/pipelines/${tile}/product.yml" \
    --load-vars-from "${work_dir}/pipelines/${tile}/params.yml" \
    --load-vars-from "${work_dir}/pipelines/${tile}/vars.yml"
  fly -t "${env_id}-pcf" set-pipeline --pipeline "upgrade-${tile}" \
    --config "${pcf_pipelines_work_dir}/upgrade-tile/pipeline.yml" \
    --load-vars-from "${work_dir}/pipelines/foundation.yml" \
    --load-vars-from "${work_dir}/pipelines/${tile}/product.yml"
}

if [ $# -gt 0 ]; then
  while [ $# -gt 0 ]; do
    case $1 in
      init )
        init pipelines
        ;;
      apply )
        apply pipelines
        ;;
      prepare )
        prepare_pipelines
        ;;
      set )
        set_pipelines
        ;;
      tile )
        set_tile_pipelines $2
        shift
        ;;
      install )
        install
        ;;
      destroy )
        destroy
        ;;
      * )
        echo "Unrecognized option: $1" 1>&2
        exit 1
        ;;
    esac
    shift
    exit
  done
fi

init pipelines
apply pipelines
prepare_pipelines
set_pipelines
