#!/usr/bin/env bash
BASEDIR=`dirname $0`/..
. "${BASEDIR}/lib/env.sh"
. "${BASEDIR}/lib/generate_passphrase.sh"
set -e

router_user=ubnt
router_work_dir=/tmp

prepare () {
  echo "---" >> ${key_dir}/router-creds.yml
  local ssh_key_file="${key_dir}/id_${router_user}"

  if [ ! -f "${ssh_key_file}" ]; then
    ssh-keygen -P "" -t rsa -f "${ssh_key_file}" -b 4096 -C ${router_user}@${router_host} > /dev/null
  fi
  ssh_public_key="$(cat ${ssh_key_file}.pub)"
  vpn_psk=`generate_passphrase 4`

  cat <<CREDS > ${key_dir}/router_creds.yml
    vpn_psk: ${vpn_psk}
CREDS

  cat <<VARS > ${work_dir}/router_vars.yml
    router_user: ${router_user}
    router_host: ${router_host}
    ssh_public_key: ${ssh_public_key}
    dns_servers: [ ${dns_servers} ]
    local_cidr: ${local_cidr}
    vpn_cidr: ${vpn_cidr}
    vmware_cidr: ${vmware_cidr}
    bootstrap_cidr: ${bootstrap_cidr}
    pcf_cidr: ${pcf_cidr}
    infrastructure_cidr: ${infrastructure_cidr}
    deployment_cidr: ${deployment_cidr}
    balancer_cidr: ${balancer_cidr}
    services_cidr: ${services_cidr}
    dynamic_cidr: ${dynamic_cidr}
    container_cidr: ${container_cidr}
    esxi_host: ${esxi_host}
    router_static_ips: [ ${router_static_ips} ]
    tcp_router_static_ips: [ ${tcp_router_static_ips} ]
    brain_static_ips: [ ${brain_static_ips} ]
VARS

  (
    export work_dir key_dir
    erb -T- router/config/config.boot.erb > ${work_dir}/config.boot
    unset work_dir key_dir
  )
}

configure () {
  scp ${work_dir}/config.boot ${router_user}@${router_host}:${router_work_dir}
  router_exec "$(cat <<COMMANDS
  configure
  load ${router_work_dir}/config.boot
  commit
  save
  exit
COMMANDS
)"
}

router_exec () {
  ssh -l ${router_user} ${router_host} "${1}"
}

if [ $# -gt 0 ]; then
  while [ $# -gt 0 ]; do
    case $1 in
      prepare )
        prepare
        ;;
      configure )
        configure
        ;;
      router_exec )
        exec ${1}
        ;;
      * )
        echo "Unrecognized option: $1" 1>&2
        exit 1
        ;;
    esac
    shift
    exit
  done
fi

prepare
configure
