#!/usr/bin/env bash
BASEDIR=`dirname $0`/..
. "${BASEDIR}/lib/env.sh"
. "${BASEDIR}/lib/generate_passphrase.sh"
set -e

router_user=ubnt
router_work_dir=/tmp

prepare () {
  echo "---" >> ${key_dir}/router-creds.yml
  local ssh_key_file="${key_dir}/id_${router_user}"
  if [ ! -f "${ssh_key_file}" ]; then
    ssh-keygen -P "" -t rsa -f "${ssh_key_file}" -b 4096 -C ${router_user}@${router_host} > /dev/null
  fi
  ssh_public_key="$(cat ${ssh_key_file}.pub)"
  vpn_psk=`generate_passphrase 4`
  echo "vpn_pre_shared_key: ${vpn_psk}" >> ${key_dir}/router-creds.yml
  (
    export router_user router_host ssh_public_key vpn_psk local_cidr vpn_cidr bootstrap_cidr pcf_cidr infrastructure_cidr deployment_cidr services_cidr dynamic_cidr kubernetes_cidr esxi_host
    erb router/config/config.boot.erb > ${work_dir}/config.boot
    unset router_user router_host ssh_public_key vpn_psk local_cidr vpn_cidr bootstrap_cidr pcf_cidr infrastructure_cidr deployment_cidr services_cidr dynamic_cidr kubernetes_cidr esxi_host
  )
}

configure () {
  scp ${work_dir}/config.boot ${router_user}@${router_host}:${router_work_dir}
  router_exec "$(cat <<COMMANDS
  configure
  load ${router_work_dir}/config.boot
  commit
  save
  exit
COMMANDS
)"
}

router_exec () {
  ssh -l ${router_user} ${router_host} "${1}"
}

if [ $# -gt 0 ]; then
  while [ $# -gt 0 ]; do
    case $1 in
      prepare )
        prepare
        ;;
      configure )
        configure
        ;;
      router_exec )
        exec ${1}
        ;;
      * )
        echo "Unrecognized option: $1" 1>&2
        exit 1
        ;;
    esac
    shift
    exit
  done
fi

prepare
configure
