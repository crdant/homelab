#!/usr/bin/env bash
BASEDIR=`dirname $0`/..
. "${BASEDIR}/lib/env.sh"
. "${BASEDIR}/lib/generate_passphrase.sh"
set -e

ssh_key_file="${key_dir}/id_vcenter"
if [ -z "$OP_SESSION_my" ]; then
  eval "$(op signin my)"
fi

vcenter_admin_password="$(op get item 'vCenter (Home Lab)' | jq -r '.details.fields[] | select(.designation == "password" ).value')"

prepare () {
  router_password="$(generate_passphrase 4)"
  if [ ! -f "${ssh_key_file}" ]; then
    ssh-keygen -P "" -t rsa -f "${ssh_key_file}" -b 4096 -C ${router_user}@${router_host} > /dev/null
  fi
  ssh_public_key="$(cat ${ssh_key_file}.pub)"
}

configure () {
  # replace appliancesh with BASH
  vsphere_exec "shell chsh -s /bin/bash"

  # enable password-less SSH
  vsphere_exec "$(cat <<COMMANDS
    mkdir /root/.ssh
    chmod 700 /root/.ssh
    touch /root/.ssh/authorized_keys
    chmod 600 /root/.ssh/authorized_keys
    echo ${ssh_public_key} >> /root/.ssh/authorized_keys
COMMANDS
  )"
  # TODO: create bucc user with dir-cli
  # TODO: create opsman user with dir-cli
}

roles () {
  (
    GOVC_INSECURE=1
    GOVC_URL=${vcenter_host}
    GOVC_USERNAME=${vcenter_admin}
    GOVC_PASSWORD=${vcenter_admin_password}

    govc role.create ${bosh_director_role} \
      Datastore.AllocateSpace \
      Datastore.Browse \
      Datastore.DeleteFile \
      Datastore.FileManagement \
      Datastore.UpdateVirtualMachineFiles \
      Datastore.UpdateVirtualMachineMetadata \
      Folder.Create \
      Folder.Delete \
      Folder.Move \
      Folder.Rename \
      Global.ManageCustomFields \
      Global.SetCustomField \
      Host.Inventory.EditCluster \
      Host.Local.CreateVM \
      Host.Local.DeleteVM \
      Host.Local.InstallAgent \
      Host.Local.ManageUserGroups \
      Host.Local.ReconfigVM \
      InventoryService.Tagging.AttachTag \
      InventoryService.Tagging.CreateCategory \
      InventoryService.Tagging.CreateTag \
      InventoryService.Tagging.DeleteCategory \
      InventoryService.Tagging.DeleteTag \
      InventoryService.Tagging.EditCategory \
      InventoryService.Tagging.EditTag \
      InventoryService.Tagging.ModifyUsedByForCategory \
      InventoryService.Tagging.ModifyUsedByForTag \
      Network.Assign \
      Network.Config \
      Network.Delete \
      Network.Move \
      Resource.AssignVMToPool \
      Resource.ColdMigrate \
      Resource.HotMigrate \
      System.Anonymous \
      System.Read \
      System.View \
      VApp.ApplicationConfig \
      VApp.AssignResourcePool \
      VApp.AssignVApp \
      VApp.AssignVM \
      VApp.Clone \
      VApp.Create \
      VApp.Delete \
      VApp.Export \
      VApp.ExtractOvfEnvironment \
      VApp.Import \
      VApp.InstanceConfig \
      VApp.ManagedByConfig \
      VApp.Move \
      VApp.PowerOff \
      VApp.PowerOn \
      VApp.Rename \
      VApp.ResourceConfig \
      VApp.Suspend \
      VApp.Unregister \
      VirtualMachine.Config.AddExistingDisk \
      VirtualMachine.Config.AddNewDisk \
      VirtualMachine.Config.AddRemoveDevice \
      VirtualMachine.Config.AdvancedConfig \
      VirtualMachine.Config.Annotation \
      VirtualMachine.Config.CPUCount \
      VirtualMachine.Config.ChangeTracking \
      VirtualMachine.Config.DiskExtend \
      VirtualMachine.Config.DiskLease \
      VirtualMachine.Config.EditDevice \
      VirtualMachine.Config.HostUSBDevice \
      VirtualMachine.Config.ManagedBy \
      VirtualMachine.Config.Memory \
      VirtualMachine.Config.MksControl \
      VirtualMachine.Config.QueryFTCompatibility \
      VirtualMachine.Config.QueryUnownedFiles \
      VirtualMachine.Config.RawDevice \
      VirtualMachine.Config.ReloadFromPath \
      VirtualMachine.Config.RemoveDisk \
      VirtualMachine.Config.Rename \
      VirtualMachine.Config.ResetGuestInfo \
      VirtualMachine.Config.Resource \
      VirtualMachine.Config.Settings \
      VirtualMachine.Config.SwapPlacement \
      VirtualMachine.Config.ToggleForkParent \
      VirtualMachine.Config.Unlock \
      VirtualMachine.Config.UpgradeVirtualHardware \
      VirtualMachine.GuestOperations.Execute \
      VirtualMachine.GuestOperations.Modify \
      VirtualMachine.GuestOperations.ModifyAliases \
      VirtualMachine.GuestOperations.Query \
      VirtualMachine.GuestOperations.QueryAliases \
      VirtualMachine.Interact.AnswerQuestion \
      VirtualMachine.Interact.Backup \
      VirtualMachine.Interact.ConsoleInteract \
      VirtualMachine.Interact.CreateScreenshot \
      VirtualMachine.Interact.CreateSecondary \
      VirtualMachine.Interact.DefragmentAllDisks \
      VirtualMachine.Interact.DeviceConnection \
      VirtualMachine.Interact.DisableSecondary \
      VirtualMachine.Interact.DnD \
      VirtualMachine.Interact.EnableSecondary \
      VirtualMachine.Interact.GuestControl \
      VirtualMachine.Interact.MakePrimary \
      VirtualMachine.Interact.Pause \
      VirtualMachine.Interact.PowerOff \
      VirtualMachine.Interact.PowerOn \
      VirtualMachine.Interact.PutUsbScanCodes \
      VirtualMachine.Interact.Record \
      VirtualMachine.Interact.Replay \
      VirtualMachine.Interact.Reset \
      VirtualMachine.Interact.SESparseMaintenance \
      VirtualMachine.Interact.SetCDMedia \
      VirtualMachine.Interact.SetFloppyMedia \
      VirtualMachine.Interact.Suspend \
      VirtualMachine.Interact.TerminateFaultTolerantVM \
      VirtualMachine.Interact.ToolsInstall \
      VirtualMachine.Interact.TurnOffFaultTolerance \
      VirtualMachine.Inventory.Create \
      VirtualMachine.Inventory.CreateFromExisting \
      VirtualMachine.Inventory.Delete \
      VirtualMachine.Inventory.Move \
      VirtualMachine.Inventory.Register \
      VirtualMachine.Inventory.Unregister \
      VirtualMachine.Namespace.Event \
      VirtualMachine.Namespace.EventNotify \
      VirtualMachine.Namespace.Management \
      VirtualMachine.Namespace.ModifyContent \
      VirtualMachine.Namespace.Query \
      VirtualMachine.Namespace.ReadContent \
      VirtualMachine.Provisioning.Clone \
      VirtualMachine.Provisioning.CloneTemplate \
      VirtualMachine.Provisioning.CreateTemplateFromVM \
      VirtualMachine.Provisioning.Customize \
      VirtualMachine.Provisioning.DeployTemplate \
      VirtualMachine.Provisioning.DiskRandomAccess \
      VirtualMachine.Provisioning.DiskRandomRead \
      VirtualMachine.Provisioning.FileRandomAccess \
      VirtualMachine.Provisioning.GetVmFiles \
      VirtualMachine.Provisioning.MarkAsTemplate \
      VirtualMachine.Provisioning.MarkAsVM \
      VirtualMachine.Provisioning.ModifyCustSpecs \
      VirtualMachine.Provisioning.PromoteDisks \
      VirtualMachine.Provisioning.PutVmFiles \
      VirtualMachine.Provisioning.ReadCustSpecs \
      VirtualMachine.State.CreateSnapshot \
      VirtualMachine.State.RemoveSnapshot \
      VirtualMachine.State.RenameSnapshot \
      VirtualMachine.State.RevertToSnapshot
  )
}

users () {
  echo
}

groups () {
  # create_group "BoshDirectorServiceAccounts" "Services accounts for BOSH director installations"
  assign_role "${bosh_director_role}" --group "${bosh_director_group}"@${domain}
}

create_user () {
  local username=${1}
  local password=${2}
  local extra_args=""
  if [ ! -z "${3}" ] ; then
    extra_args=" --first-name ${3}"
  fi
  if [ ! -z "${4}" ] ; then
    extra_args="$extra_args --last-name ${4}"
  fi
  dir_cli user create --account ${username} --user-password $( printf "%q" ${password}) ${extra_args}
}


create_group () {
  local group=${1}
  local description=${2}
  dir_cli ssogroup create --name ${group} --description "${description}"
}

add_group_user () {
  local user=${1}
  local group=${2}
  dir_cli group modify --name "${group}" --add "${user}"
}

assign_role () {
  local role=${1}
  if [ "--group" == "${2}" ] ; then
    local group_flag="${2}"
    local principal="${3}"
  else
    local principal="${2}"
  fi

  (
    GOVC_INSECURE=1
    GOVC_URL=${vcenter_host}
    GOVC_USERNAME=${vcenter_admin}
    GOVC_PASSWORD=${vcenter_admin_password}

    govc permissions.set -principal "${principal}" -role "${role}" ${group_flag}
  )
}

dir_cli () {
  for var in "$@"
  do
    args="${args} '${var}'"
  done
  vsphere_exec "/usr/lib/vmware-vmafd/bin/dir-cli ${args}"
}

vsphere_exec () {
  ssh -l root ${vcenter_host} -i ${ssh_key_file} "${*}"
}

if [ $# -gt 0 ]; then
  while [ $# -gt 0 ]; do
    case $1 in
      prepare )
        prepare
        ;;
      configure )
        configure
        ;;
      roles )
        roles
        ;;
      users )
        users
        ;;
      groups )
        groups
        ;;
      user)
        while [ $# -gt 0 ]; do
          case $2 in
            create )
              username=${3}
              password=${4}
              first=${5}
              last=${6}
              shift 6
              create_user ${username} ${password} ${first} ${last}
              ;;
            assign )
              username="${3}"
              role="${4}"
              shift 4
              assign_role "${group}" "${role}"
              ;;
            * )
              echo "Unrecognized option: $1" 1>&2
              exit 1
              ;;
          esac
        done
        ;;
      group)
        while [ $# -gt 0 ]; do
          case $2 in
            create )
              group="${3}"
              description="${4}"
              shift 4
              create_group ${group} ${description}
              ;;
            add )
              group="${3}"
              username="${4}"
              shift 4
              add_group_user "${group}" "${username}"
              ;;
            assign )
              role="${3}"
              group="${4}"
              shift 4
              assign_role "${role}" "${group}"
              ;;
            * )
              echo "Unrecognized option: $1" 1>&2
              exit 1
              ;;
          esac
        done
        ;;
      * )
        echo "Unrecognized option: $1" 1>&2
        exit 1
        ;;
    esac
    shift
    exit
  done
fi

prepare
configure
users
roles
groups
